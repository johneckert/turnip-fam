{"version":3,"sources":["Components/Viz.js","Components/Island.js","Components/IslandNav.js","App.js","serviceWorker.js","index.js"],"names":["Viz","props","prices","islandData","mAM","mPM","tAM","tPM","wAM","wPM","thAM","thPM","fAM","fPM","sAM","sPM","pp","pattern","trend","getPatternCode","forEach","price","day","link","className","href","target","rel","Island","islandName","name","toUpperCase","map","key","IslandNav","tabs","islands","console","log","island","onClick","setCurrentIsland","App","state","islandsMap","id","currentIsland","trendHistory","Islands","e","innerHTML","setState","fetch","then","res","json","records","trendElem","this","elem","fields","Name","trendId","trendItem","find","Type","priceCodeArray","Prices","pricesArray","code","length","selection","filter","Status","priceItem","Price","Day","push","isl","getPrices","getTrend","testState","getCurrentIslandData","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+OA8FeA,G,MA5FH,SAAAC,GAER,IAAIC,EAASD,EAAME,WAAWD,OAE1BE,EAAM,GACRC,EAAM,GACNC,EAAM,GACNC,EAAM,GACNC,EAAM,GACNC,EAAM,GACNC,EAAO,GACPC,EAAO,GACPC,EAAM,GACNC,EAAM,GACNC,EAAM,GACNC,EAAM,GACNC,EAAK,GACLC,EAkDF,WACI,OAAOhB,EAAME,WAAWe,OACpB,IAAK,cACD,MAAM,aACV,IAAK,cACD,MAAM,aACV,IAAK,cACD,MAAM,aACV,IAAK,aACD,MAAM,aACV,QACI,MAAO,IA7DPC,GAEZjB,EAAOkB,SAAQ,SAAAC,GACX,OAAQA,EAAMC,KACV,IAAK,YACDlB,EAAMiB,EAAMA,MACZ,MACJ,IAAK,YACDhB,EAAMgB,EAAMA,MACZ,MACJ,IAAK,aACDf,EAAMe,EAAMA,MACZ,MACJ,IAAK,aACDd,EAAMc,EAAMA,MACZ,MACJ,IAAK,eACDb,EAAMa,EAAMA,MACZ,MACJ,IAAK,eACDZ,EAAMY,EAAMA,MACZ,MACJ,IAAK,cACDX,EAAOW,EAAMA,MACb,MACJ,IAAK,cACDV,EAAOU,EAAMA,MACb,MACJ,IAAK,YACDT,EAAMS,EAAMA,MACZ,MACJ,IAAK,YACDR,EAAMQ,EAAMA,MACZ,MACJ,IAAK,cACDP,EAAMO,EAAMA,MACZ,MACJ,IAAK,cACDN,EAAMM,EAAMA,MACZ,MACJ,IAAK,iBACDL,EAAKK,EAAMA,UAOvB,IAAIE,EAAI,0CAAsCP,EAAtC,YAA4CZ,EAA5C,YAAmDC,EAAnD,YAA0DC,EAA1D,YAAiEC,EAAjE,YAAwEC,EAAxE,YAA+EC,EAA/E,YAAsFC,EAAtF,YAA8FC,EAA9F,YAAsGC,EAAtG,YAA6GC,EAA7G,YAAoHC,EAApH,YAA2HC,GAA3H,OAAiIE,GAkBzI,OACE,yBAAKO,UAAU,OACb,uBAAGC,KAAMF,EAAMG,OAAO,SAASC,IAAI,uBAAnC,+BC7DOC,EAvBA,SAAA3B,GACX,IAEIC,EAFA2B,EAAa5B,EAAME,WAAW2B,KAAKC,cACnCb,EAAQjB,EAAME,WAAWe,MAS7B,OANIhB,EADAD,EAAME,WAAWD,OACRD,EAAME,WAAWD,OAAO8B,KAAI,SAACX,EAAOY,GAC7C,OAAO,wBAAIA,IAAKA,GAAMZ,EAAMC,IAArB,KAA4BD,EAAMA,UAGhC,GAGX,yBAAKG,UAAU,UACb,4BAAKK,GACL,yBAAKL,UAAU,QACb,qCAAWN,GACX,4BAAKhB,IAEP,kBAAC,EAAD,CAAKC,WAAYF,EAAME,eCChB+B,EApBG,SAACjC,GACf,IAEIkC,EAFAC,EAAUnC,EAAMmC,QAYpB,OAXAC,QAAQC,IAAIF,GAGZD,EAAOC,EAAQJ,KAAI,SAACO,EAAQN,GACxB,OACI,yBAAKT,UAAU,MAAMS,IAAKA,EAAKO,QAASvC,EAAMwC,kBACzCF,EAAOT,SAMhB,yBAAKN,UAAU,WACVW,IC2HEO,E,4MAtIbC,MAAQ,CACNC,WAAY,CACV,CAAEd,KAAM,SAAUe,GAAI,qBACtB,CAAEf,KAAM,aAAce,GAAI,qBAC1B,CAAEf,KAAM,aAAce,GAAI,sBAE5BC,cAAe,aACf5C,OAAQ,GACR6C,aAAc,GACdC,QAAS,I,EAwFXP,iBAAmB,SAACQ,GAClB,IAAInB,EAAOmB,EAAEvB,OAAOwB,UACpB,EAAKC,SAAL,2BACK,EAAKR,OADV,IAEEG,cAAehB,M,kEAzFE,IAAD,OAClBsB,MACE,kFAECC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACE,GACL,EAAKJ,SAAL,2BACK,EAAKR,OADV,IAEEzC,OAAQqD,EAAKC,cAInBJ,MACE,2FAECC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACE,GACL,EAAKJ,SAAL,2BACK,EAAKR,OADV,IAEEI,aAAcQ,EAAKC,cAIzBJ,MACE,mFAECC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACE,GACL,EAAKJ,SAAL,2BACK,EAAKR,OADV,IAEEK,QAASO,EAAKC,gB,+BAKbjB,GACP,IAAIkB,EAOJ,GANAC,KAAKf,MAAMK,QAAQ5B,SAAQ,SAACuC,GAExBF,EADEE,GAAQA,EAAKC,OAAOC,OAAStB,EAAOT,KAC1B6B,EACK,MAGjBF,GAAaA,EAAUG,OAAQ,CACjC,IAAIE,EAAUL,EAAS,OAAW,iBAAiB,GAC/CM,EAAYL,KAAKf,MAAMI,aAAaiB,MACtC,SAACL,GAAD,OAAUA,EAAKd,KAAOiB,KAExB,OAAIC,GAAaA,EAAUH,OAClBG,EAAUH,OAAOK,KAGjB,gB,gCAKH1B,GAAS,IAAD,OACZ2B,EAAiB,GACrBR,KAAKf,MAAMK,QAAQ5B,SAAQ,SAACuC,GACtBA,GAAQA,EAAKC,OAAOC,OAAStB,EAAOT,OACtCoC,EAAiBP,EAAKC,OAAOO,WAGjC,IAAIC,EAAc,GAclB,OAbAF,EAAe9C,SAAQ,SAAAiD,GACrB,GAAI,EAAK1B,MAAMzC,QAAU,EAAKyC,MAAMzC,OAAOoE,OAAS,EAAG,CACrD,IAAIC,EAAY,EAAK5B,MAAMzC,OACxBsE,QAAO,SAACnD,GAAD,MAAmC,YAAxBA,EAAMuC,OAAOa,UAC/BT,MAAK,SAACL,GAAD,OAAUA,EAAKd,KAAOwB,KAC1BK,EAAY,GACZH,GAAaA,EAAUX,SACzBc,EAAUrD,MAAQkD,EAAUX,OAAOe,MACnCD,EAAUpD,IAAMiD,EAAUX,OAAOgB,IACjCR,EAAYS,KAAKH,QAIhBN,I,kCAIP/B,QAAQC,IAAIoB,KAAKf,S,6CAWK,IAAD,OACjBxC,EAAa,GACb2C,EAAgBY,KAAKf,MAAMC,WAAW4B,QAAO,SAAAM,GAAG,OAAIA,EAAIhD,OAAS,EAAKa,MAAMG,iBAAe,GAM/F,OALAT,QAAQC,IAAI,KAAMQ,GAClB3C,EAAW2B,KAAOgB,EAAchB,KAChC3B,EAAWD,OAASwD,KAAKqB,UAAUjC,GACnC3C,EAAWe,MAAQwC,KAAKsB,SAASlC,GACjCT,QAAQC,IAAI,aAAcnC,GACnBA,I,+BAMP,OAFAuD,KAAKuB,YAGH,yBAAKzD,UAAU,OACb,4BAAQA,UAAU,cAChB,0CACA,kBAAC,EAAD,CACEY,QAASsB,KAAKf,MAAMC,WACpBH,iBAAkBiB,KAAKjB,oBAG3B,kBAAC,EAAD,CAAQtC,WAAYuD,KAAKwB,yBAR3B,S,GAzHYC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/D,QAAQ+D,MAAMA,EAAMC,a","file":"static/js/main.05cf133c.chunk.js","sourcesContent":["import React from 'react';\n\nconst Viz = props => {\n\n    let prices = props.islandData.prices;\n\n    let mAM = \"\",\n      mPM = \"\",\n      tAM = \"\",\n      tPM = \"\",\n      wAM = \"\",\n      wPM = \"\",\n      thAM = \"\",\n      thPM = \"\",\n      fAM = \"\",\n      fPM = \"\",\n      sAM = \"\",\n      sPM = \"\",\n      pp = \"\",\n      pattern = getPatternCode();\n\n    prices.forEach(price => {\n        switch (price.day) {\n            case \"Monday AM\":\n                mAM = price.price;\n                break;\n            case \"Monday PM\":\n                mPM = price.price;\n                break;\n            case \"Tuesday AM\":\n                tAM = price.price;\n                break;\n            case \"Tuesday PM\":\n                tPM = price.price;\n                break;\n            case \"Wednesday AM\":\n                wAM = price.price;\n                break;\n            case \"Wednesday PM\":\n                wPM = price.price;\n                break;\n            case \"Thursday AM\":\n                thAM = price.price;\n                break;\n            case \"Thursday PM\":\n                thPM = price.price;\n                break;\n            case \"Friday AM\":\n                fAM = price.price;\n                break;\n            case \"Friday PM\":\n                fPM = price.price;\n                break;\n            case \"Saturday AM\":\n                sAM = price.price;\n                break;\n            case \"Saturday PM\":\n                sPM = price.price;\n                break;\n            case \"Purchase Price\":\n                pp = price.price;\n                break;\n            default:\n                break;\n        }\n    })\n\n    let link = `https://turnipprophet.io?prices=${pp}.${mAM}.${mPM}.${tAM}.${tPM}.${wAM}.${wPM}.${thAM}.${thPM}.${fAM}.${fPM}.${sAM}.${sPM}${pattern}`;\n\n    function getPatternCode() {\n        switch(props.islandData.trend) {\n            case 'Fluctuating':\n                return `&pattern=0`;\n            case 'Small Spike':\n                return `&pattern=1`;\n            case 'Large Spike':\n                return `&pattern=2`;\n            case 'Decreasing':\n                return `&pattern=3`;\n            default:\n                return '';\n            \n        }\n    }\n\n    return (\n      <div className=\"viz\">\n        <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n          Open on turnipprophet.io\n        </a>\n      </div>\n    );\n};\n\nexport default Viz;","import React from \"react\";\nimport Viz from \"./Viz\";\n\nconst Island = props => {\n    let islandName = props.islandData.name.toUpperCase();\n    let trend = props.islandData.trend;\n    let prices;\n    if (props.islandData.prices) {\n        prices = props.islandData.prices.map((price, key) => {\n        return <li key={key}>{price.day}: {price.price}</li>;\n        });\n    } else {\n        prices = \"\";\n    }\n    return (\n      <div className=\"island\">\n        <h1>{islandName}</h1>\n        <div className=\"data\">\n          <p>Trend: {trend}</p>\n          <ul>{prices}</ul>\n        </div>\n        <Viz islandData={props.islandData}></Viz>\n      </div>\n    );\n};\n\nexport default Island;","import React from 'react';\n\nconst IslandNav = (props) => {\n    let islands = props.islands;\n    console.log(islands)\n    let tabs;\n\n    tabs = islands.map((island, key) => {\n        return (\n            <div className=\"tab\" key={key} onClick={props.setCurrentIsland}>\n                {island.name}\n            </div>\n        );\n    });\n\n    return(\n        <div className=\"nav-bar\">\n            {tabs}\n        </div>\n    )\n};\n\nexport default IslandNav;","import React, { Component } from 'react';\nimport './App.css';\nimport Island from './Components/Island';\nimport IslandNav from './Components/IslandNav';\n\nclass App extends Component {\n  state = {\n    islandsMap: [\n      { name: \"Pangea\", id: \"rec4pkXw2fuxCkz96\" },\n      { name: \"Beachville\", id: \"rec5iK0WpYyf3HSZq\" },\n      { name: \"Quarantown\", id: \"recsTTbtgsGb8H2f8\" },\n    ],\n    currentIsland: \"Quarantown\",\n    prices: [],\n    trendHistory: [],\n    Islands: [],\n  };\n  //get price entries\n  componentDidMount() {\n    fetch(\n      \"https://api.airtable.com/v0/appoISrWazljbBWsc/Prices?api_key=keyZ45rUNype5TblZ\"\n    )\n      .then((res) => res.json())\n      .then((json) => {\n        this.setState({\n          ...this.state,\n          prices: json.records,\n        });\n      });\n    //get trend history\n    fetch(\n      \"https://api.airtable.com/v0/appoISrWazljbBWsc/Trend%20History?api_key=keyZ45rUNype5TblZ\"\n    )\n      .then((res) => res.json())\n      .then((json) => {\n        this.setState({\n          ...this.state,\n          trendHistory: json.records,\n        });\n      });\n    //get island data\n    fetch(\n      \"https://api.airtable.com/v0/appoISrWazljbBWsc/Islands?api_key=keyZ45rUNype5TblZ\"\n    )\n      .then((res) => res.json())\n      .then((json) => {\n        this.setState({\n          ...this.state,\n          Islands: json.records,\n        });\n      });\n  }\n\n  getTrend(island) {\n    let trendElem;\n    this.state.Islands.forEach((elem) => {\n      if (elem && elem.fields.Name === island.name) {\n        trendElem = elem;\n      } else trendElem = {};\n    });\n\n    if (trendElem && trendElem.fields) {\n      let trendId = trendElem[\"fields\"][\"Trend History\"][0]; //needs to change for multiple weeks\n      let trendItem = this.state.trendHistory.find(\n        (elem) => elem.id === trendId\n      );\n      if (trendItem && trendItem.fields) {\n        return trendItem.fields.Type;\n      }\n      else {\n        return \"loading...\"\n      }\n    }\n  }\n\n  getPrices(island) {\n    let priceCodeArray = [];\n    this.state.Islands.forEach((elem) => {\n      if (elem && elem.fields.Name === island.name) {\n        priceCodeArray = elem.fields.Prices;\n      }\n    });\n    let pricesArray = [];\n    priceCodeArray.forEach(code => {\n      if (this.state.prices && this.state.prices.length > 0) {\n        let selection = this.state.prices\n          .filter((price) => price.fields.Status === \"Current\")\n          .find((elem) => elem.id === code);\n        let priceItem = {};\n        if (selection && selection.fields) {\n          priceItem.price = selection.fields.Price;\n          priceItem.day = selection.fields.Day;\n          pricesArray.push(priceItem);\n        }\n      }\n    })\n    return pricesArray;\n  }\n\n  testState() {\n    console.log(this.state);\n  }\n\n  setCurrentIsland = (e) => {\n    let name = e.target.innerHTML\n    this.setState({\n      ...this.state,\n      currentIsland: name\n    })\n  } \n\n  getCurrentIslandData() {\n    let islandData = {};\n    let currentIsland = this.state.islandsMap.filter(isl => isl.name === this.state.currentIsland)[0]\n    console.log(\"ci\", currentIsland)\n    islandData.name = currentIsland.name;\n    islandData.prices = this.getPrices(currentIsland);\n    islandData.trend = this.getTrend(currentIsland);\n    console.log(\"islandData\", islandData)\n    return islandData;\n  }\n\n  render() {\n    this.testState();\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Turnip Fam</h1>\n          <IslandNav\n            islands={this.state.islandsMap}\n            setCurrentIsland={this.setCurrentIsland}\n          ></IslandNav>\n        </header>\n        <Island islandData={this.getCurrentIslandData()}></Island>;\n      </div>\n    );\n  }\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}